TTGO T8 V1.7 ESP32 4MB PSRAM TF Karte

USB chip: CH9102F
-> same driver as for CH34x
-> Is detected by macOS Big Sur (/dev/cu.usbmodem537A0464381), but doesn't work properly.
-> Needs new driver: http://www.wch-ic.com/downloads/CH34XSER_MAC_ZIP.html
-> Device: /dev/cu.wchusbserial537A0464381

To flash:
- esp32 has to turned on
  * i.e. if there is a on/off switch, it has to be on!

Install esp32 Arduino platform:
1. Follow https://docs.espressif.com/projects/arduino-esp32/en/latest/installing.html
2. This should e.g. provide WifiClient.h
3. Select "ESP32 Dev" board
4. Default Settings are ok.

Arduino settings: https://github.com/espressif/arduino-esp32/issues/2591
- use ESP32 dev board.
- PSRAM: enabled.
  ==> TODO: Without this, we fail to allocate the memory that we need.
  ==> Does the usage of PSRAM slow us down?!!

Examples: Under Arduino -> Examples for ESP32 Dev-> Wifi
- e.g. Wifi Scan

ESP32 pinout:
https://randomnerdtutorials.com/esp32-pinout-reference-gpios/
!! Also SDRam reader on-board, so only use VSPI (not HSPI) !!


Waveshare Display pinout:
https://www.waveshare.com/wiki/2.4inch_LCD_Module

Graphic Library:
TFT_eSPI
User_Setup.h (under ESP32):
#define SPI_FREQUENCY  80000000

#define TFT_MOSI 23
#define TFT_SCLK 18
#define TFT_CS   5  // Chip select control pin
#define TFT_DC    19  // Data Command control pin
//#define TFT_RST   4  // Reset pin (could connect to RST pin)
#define TFT_RST  -1  // Set TFT_RST to -1 if display RESET is connected to ESP32 board RST
#define TFT_BL   22  // LED back-light

!! Do not use GPIO0, somehow the chip doesn't boot then...

Control LED on the board (via digitalWrite)
#define LED 21

Joystick: (via analogRead)
#define JOYSTICK_X 25
#define JOYSTICK_Y 26
#define JOYSTICK_Z 27

Fast JPEG decoding and drawing:
* See Flash_jpeg_dma example from TFT_eSPI library
  - modified to use https://github.com/bitbank2/JPEGDEC
* Without pushing to the device: 45ms.
* DMA is similar to a second processor code.
* I.e. need to wait for dma do finish before next
  transfer. Then we are only limited by spi speed.

Getting 14 FPS.
- Note: The decode task has no wait time in between runs.
  => Speed limited by SPI bus speed.
  => Set speed to 40 MHz. Using 80 Mhz works too, but leads to 
     Strange artifacts on the display.
- Note: Receiving about 25 FPS from the server (i.e. without decoding the jpeg).
==> Good enough!!

Camera module:
- LILYGOÂ® TTGO T-Camera ESP32 WROVER & PSRAM Camera Module ESP32-WROVER-B OV2640 Camera
- USB Driver: 
  * CP2102 USB-UART chip
  * https://www.silabs.com/developers/usb-to-uart-bridge-vcp-drivers
- 



Camera: original code under:
https://github.com/espressif/esp32-camera/blob/master/README.md
